public class Solution {
    public int totalNQueens(int n) {
        // IMPORTANT: Please reset any member data you declared, as
        // the same Solution instance will be reused for each test case.
    //this is the array to store the queen position in each row
    int[] path = new int[n];

    return solveNQueensHelper(n, n, path);
}

public int solveNQueensHelper(int n, int row, int[] path) {
    if (row == 0) {
       return 1;
    } else {
        int sum = 0;
        for (int p=0; p<n; p++) {
            //in row index, put queue at column p
            if (isValid(path, p, row-1, n)) {

                path[row-1] = p;

                sum+=solveNQueensHelper(n, row-1, path);
            }
        }//end for
        return sum;
    }
}

public boolean isValid(int[] path, int queen, int row, int n) {

    for (int i=n-1; i>row; i--) {

        int col = path[i];
        //check if col is duplicated
        if (col == queen) return false;

        int row_distance = Math.abs(row - i);

        int col_distance = Math.abs(col - queen);

        if (col_distance == row_distance) return false;

    }

    return true;
    }
}
