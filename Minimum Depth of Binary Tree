/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int minDepth(TreeNode root) {
        // Note: The Solution object is instantiated only once and is reused by each test case.
        if(root == null) return 0;
        int result = 1;
        Queue<TreeNode> temp = new LinkedList<TreeNode>();
        temp.add(root);
        return helpler(temp, result);
    }
    private int helpler(Queue<TreeNode> temp, int result)
    {
        
        if(temp.isEmpty())
            return result;
        int all = temp.size(); 
        for(int i=0; i<all; i++)//search all the elements in the Queue
        {
            TreeNode current = temp.poll();
            if(current.left == null && current.right == null)
                return result;
            else{
                if(current.left != null)
                    temp.add(current.left);
                if(current.right != null)
                    temp.add(current.right);
            }
        }//end while loop
        result++;
        return helpler(temp, result);
    }
}
