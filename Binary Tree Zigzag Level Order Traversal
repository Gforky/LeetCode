/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ArrayList<ArrayList<Integer>> zigzagLevelOrder(TreeNode root) {
        // IMPORTANT: Please reset any member data you declared, as
        // the same Solution instance will be reused for each test case.
        ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>();
        if(root == null) return result;
        Stack<TreeNode> temp = new Stack<TreeNode>();
        temp.push(root);
        return left_right(result, temp);
    }
    private ArrayList<ArrayList<Integer>> right_left(ArrayList<ArrayList<Integer>> result, Stack<TreeNode> temp)
    {
        if(temp.isEmpty())
            return result;
        ArrayList<Integer> now = new ArrayList<Integer>();
        Stack<TreeNode> next = new Stack<TreeNode>();
        while(!temp.isEmpty()){
            TreeNode current = temp.pop();
            now.add(current.val);
            if(current.right != null)
            {
                next.push(current.right);
            }
            if(current.left != null)
            {
                next.push(current.left);
            }
        }//end while loop
        result.add(now);
        return left_right(result, next);
    }
    private ArrayList<ArrayList<Integer>> left_right(ArrayList<ArrayList<Integer>> result, Stack<TreeNode> temp)
    {
        if(temp.isEmpty())
            return result;
        ArrayList<Integer> now = new ArrayList<Integer>();
        Stack<TreeNode> next = new Stack<TreeNode>();
        while(!temp.isEmpty()){
            TreeNode current = temp.pop();
            now.add(current.val);
            if(current.left != null)
            {
                next.push(current.left);
            }
            if(current.right != null)
            {
                next.push(current.right);
            }
        }//end while loop
        result.add(now);
        return right_left(result, next);
    }
}
