/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode reverseBetween(ListNode head, int m, int n) {
        // IMPORTANT: Please reset any member data you declared, as
        // the same Solution instance will be reused for each test case.
        if(head == null)
            return null;
        if(m == n)
            return head;
        int count = 0;
        ListNode front = new ListNode(-1); // for the case of m == 1
        front.next = head;
        ListNode current = front;
        ListNode m_node = new ListNode(m);
        ListNode p_m = new ListNode(m-1);
        while(count<m)
        {
            count++;
            if(count == m)
            {
                p_m = current;
                m_node = current.next;
            }
            current = current.next;
        }
        count++;
        current = m_node.next;
        while(count<=n)
        {
            m_node.next = current.next;
            current.next = p_m.next;
            p_m.next = current;
            current = m_node.next;
            count++;
        }
        return front.next;
    }
}
